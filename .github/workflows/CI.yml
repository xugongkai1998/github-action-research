name: Build Process

on:
  push:
    tags:
      - 'release-v*'

jobs:
  # 定义构建作业
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 构建版本号初始化
        id: meta
        run: |
          echo REPO_NAME=$(echo ${GITHUB_REPOSITORY} | awk -F"/" '{print $2}') >> $GITHUB_OUTPUT
          echo REPO_VERSION=$(echo ${{ github.ref }} | awk -F"/" '{print $3}' | awk -F"v" '{print $2}') >> $GITHUB_OUTPUT

      - name: 检出源代码
        uses: actions/checkout@v3

      - name: 初始化Java环境
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          # server-id是直接指定名称的，不是声明变量的形式！！！！！
          # 另外的用户名，密码： 是在初始化mvn环境时，声明指定的变量的名称，下文在使用到mvn的地方，需要通过env标签给这些变量赋值
          # 参见：https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#publishing-using-apache-maven
          server-id: ${{ secrets.PRIVATE_MAVEN_REPOSITORY_ID }}
          server-username: ALIYUN_PRIVATE_REPOSITORY_USERNAME
          server-password: ALIYUN_PRIVATE_REPOSITORY_PASSWORD

      - name: 查看Maven配置
        run: |
          cat ~/.m2/settings.xml
          
      - name: 执行Maven编译
        run: |
          # 运行打包 Maven 项目的命令
          mvn -DskipTests=true -U clean package --file pom.xml
        env:
          ALIYUN_PRIVATE_REPOSITORY_USERNAME: ${{ secrets.PRIVATE_MAVEN_REPOSITORY_USERNAME }}
          ALIYUN_PRIVATE_REPOSITORY_PASSWORD: ${{ secrets.PRIVATE_MAVEN_REPOSITORY_PASSWORD }}

      # - name: 初始化Docker执行环境-QEMU
      #   uses: docker/setup-qemu-action@v2

      - name: 初始化Docker执行环境-多平台支持
        uses: docker/setup-buildx-action@v2

      - name: 登录至Docker镜像仓库-DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 构建Docker镜像
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: |
            linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_NAMESPACE }}/${{ steps.meta.outputs.REPO_NAME }}:latest
            ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_NAMESPACE }}/${{ steps.meta.outputs.REPO_NAME }}:${{ steps.meta.outputs.REPO_VERSION }}
          cache-from: type=local,src=/opt/dockercache/.buildx-${{ steps.meta.outputs.REPO_NAME }}-cache
          cache-to: type=local,dest=/opt/dockercache/.buildx-${{ steps.meta.outputs.REPO_NAME }}-cache-new,mode=max

      - name: 重建Docker缓存
        run: |
          rm -rf /opt/dockercache/.buildx-${{ steps.meta.outputs.REPO_NAME }}-cache
          mv /opt/dockercache/.buildx-${{ steps.meta.outputs.REPO_NAME }}-cache-new /opt/dockercache/.buildx-${{ steps.meta.outputs.REPO_NAME }}-cache

      - name: 启动服务-节点数量[5]
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.TENCENT_3_YEARS_SSH_HOST }}
          username: root
          port: 60000
          privateKey: ${{ secrets.TENCENT_3_YEARS_SSH_PRIVATE_KEY}}
          command: |
            cd ${{ secrets.DEPLOY_PATH }}
            echo 'IMAGE_VERSION=${{ steps.meta.outputs.REPO_VERSION }}' > ${{ secrets.DEPLOY_ENV_FILE_PATH }}
            docker compose --env-file ${{ secrets.DEPLOY_ENV_FILE_PATH }} -f ${{ secrets.DEPLOY_DOCKER_COMPOSE_FILE_PATH }} up -d --force-recreate --scale github-action-research=${{secrets.DEPLOY_INSTANCE_NODE_NUM}}
            docker image prune -a --force --filter "until=24h"
